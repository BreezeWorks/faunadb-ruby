var search_data = {"index":{"searchIndex":["fauna","badrequest","bytes","client","clientlogger","context","errordata","failure","faraday","faunaerror","internalerror","methodnotallowed","nocontexterror","notfound","page","permissiondenied","query","queryv","ref","requestresult","setref","unauthorized","unavailableerror","unexpectederror","==()","==()","==()","==()","==()","add()","after()","all()","and_()","append()","at()","auth()","before()","block()","call()","casefold()","class_()","client()","concat()","contains()","create()","create_class()","create_database()","create_function()","create_index()","create_key()","data()","database()","date()","delete()","delete()","delete()","difference()","distinct()","divide()","do_()","drop()","each()","epoch()","eql?()","eql?()","eql?()","eql?()","eql?()","equals()","exists()","expr()","filter()","filter()","foreach()","foreach!()","from_base64()","function()","get()","get()","get()","gt()","gte()","id()","identify()","if_()","index()","insert()","intersection()","join()","key_from_secret()","lambda()","lambda_expr()","let()","load!()","logger()","login()","logout()","lt()","lte()","map()","map()","match()","modulo()","multiply()","new()","new()","new()","new()","new()","new()","new()","next_id()","not_()","object()","or_()","page_after()","page_before()","paginate()","paginate()","paginate()","patch()","patch()","ping()","pop()","post()","post()","postprocessing_map()","prepend()","push()","put()","put()","query()","query()","query()","raise_for_status_code()","ref()","remove()","replace()","reset()","reverse_each()","select()","show_request_result()","subtract()","take()","time()","time_from_usecs()","time_taken()","to_class()","to_hash()","to_hash()","to_hash()","to_hash()","to_s()","union()","update()","usecs_from_time()","var()","with_params()","with_secret()","readme"],"longSearchIndex":["fauna","fauna::badrequest","fauna::bytes","fauna::client","fauna::clientlogger","fauna::context","fauna::errordata","fauna::failure","fauna::faraday","fauna::faunaerror","fauna::internalerror","fauna::methodnotallowed","fauna::nocontexterror","fauna::notfound","fauna::page","fauna::permissiondenied","fauna::query","fauna::queryv","fauna::ref","fauna::requestresult","fauna::setref","fauna::unauthorized","fauna::unavailableerror","fauna::unexpectederror","fauna::bytes#==()","fauna::page#==()","fauna::queryv#==()","fauna::ref#==()","fauna::setref#==()","fauna::query#add()","fauna::page#after()","fauna::page#all()","fauna::query#and_()","fauna::query#append()","fauna::query#at()","fauna::requestresult#auth()","fauna::page#before()","fauna::context::block()","fauna::query#call()","fauna::query#casefold()","fauna::query#class_()","fauna::context::client()","fauna::query#concat()","fauna::query#contains()","fauna::query#create()","fauna::query#create_class()","fauna::query#create_database()","fauna::query#create_function()","fauna::query#create_index()","fauna::query#create_key()","fauna::page#data()","fauna::query#database()","fauna::query#date()","fauna::client#delete()","fauna::context::delete()","fauna::query#delete()","fauna::query#difference()","fauna::query#distinct()","fauna::query#divide()","fauna::query#do_()","fauna::query#drop()","fauna::page#each()","fauna::query#epoch()","fauna::bytes#eql?()","fauna::page#eql?()","fauna::queryv#eql?()","fauna::ref#eql?()","fauna::setref#eql?()","fauna::query#equals()","fauna::query#exists()","fauna::query::expr()","fauna::page#filter()","fauna::query#filter()","fauna::query#foreach()","fauna::page#foreach!()","fauna::bytes::from_base64()","fauna::query#function()","fauna::client#get()","fauna::context::get()","fauna::query#get()","fauna::query#gt()","fauna::query#gte()","fauna::ref#id()","fauna::query#identify()","fauna::query#if_()","fauna::query#index()","fauna::query#insert()","fauna::query#intersection()","fauna::query#join()","fauna::query#key_from_secret()","fauna::query#lambda()","fauna::query#lambda_expr()","fauna::query#let()","fauna::page#load!()","fauna::clientlogger::logger()","fauna::query#login()","fauna::query#logout()","fauna::query#lt()","fauna::query#lte()","fauna::page#map()","fauna::query#map()","fauna::query#match()","fauna::query#modulo()","fauna::query#multiply()","fauna::bytes::new()","fauna::client::new()","fauna::faunaerror::new()","fauna::page::new()","fauna::queryv::new()","fauna::ref::new()","fauna::setref::new()","fauna::query#next_id()","fauna::query#not_()","fauna::query#object()","fauna::query#or_()","fauna::page#page_after()","fauna::page#page_before()","fauna::client#paginate()","fauna::context::paginate()","fauna::query#paginate()","fauna::client#patch()","fauna::context::patch()","fauna::client#ping()","fauna::context::pop()","fauna::client#post()","fauna::context::post()","fauna::page#postprocessing_map()","fauna::query#prepend()","fauna::context::push()","fauna::client#put()","fauna::context::put()","fauna::client#query()","fauna::context::query()","fauna::query#query()","fauna::faunaerror::raise_for_status_code()","fauna::query#ref()","fauna::query#remove()","fauna::query#replace()","fauna::context::reset()","fauna::page#reverse_each()","fauna::query#select()","fauna::clientlogger::show_request_result()","fauna::query#subtract()","fauna::query#take()","fauna::query#time()","fauna::time_from_usecs()","fauna::requestresult#time_taken()","fauna::ref#to_class()","fauna::bytes#to_hash()","fauna::queryv#to_hash()","fauna::ref#to_hash()","fauna::setref#to_hash()","fauna::ref#to_s()","fauna::query#union()","fauna::query#update()","fauna::usecs_from_time()","fauna::query#var()","fauna::page#with_params()","fauna::client#with_secret()",""],"info":[["Fauna","","Fauna.html","","<p>Main namespace for the FaunaDB driver.\n"],["Fauna::BadRequest","","Fauna/BadRequest.html","","<p>An exception thrown if FaunaDB cannot evaluate a query.\n"],["Fauna::Bytes","","Fauna/Bytes.html","","<p>A Bytes wrapper.\n<p>Reference: FaunaDB Special Types\n"],["Fauna::Client","","Fauna/Client.html","","<p>The Ruby client for FaunaDB.\n<p>All methods return a converted JSON response. This is a Hash containing  …\n"],["Fauna::ClientLogger","","Fauna/ClientLogger.html","","<p>Example observer that can be used for debugging\n"],["Fauna::Context","","Fauna/Context.html","","<p>The client context wrapper.\n<p>Used for accessing the client without directly passing around the client\ninstance. …\n"],["Fauna::ErrorData","","Fauna/ErrorData.html","","<p>Data for one error returned by the server.\n"],["Fauna::Failure","","Fauna/Failure.html","","<p>Part of ErrorData. For more information, see the docs.\n"],["Fauna::Faraday","","Fauna/Faraday.html","",""],["Fauna::FaunaError","","Fauna/FaunaError.html","","<p>Error returned by the FaunaDB server. For documentation of error types, see\nthe docs.\n"],["Fauna::InternalError","","Fauna/InternalError.html","","<p>An exception thrown if FaunaDB responds with an HTTP 500. Such errors\nrepresent an internal failure within …\n"],["Fauna::MethodNotAllowed","","Fauna/MethodNotAllowed.html","","<p>An exception thrown if FaunaDB responds with an HTTP 405.\n"],["Fauna::NoContextError","","Fauna/NoContextError.html","","<p>Error raised when the context is used without a client being set.\n"],["Fauna::NotFound","","Fauna/NotFound.html","","<p>An exception thrown if FaunaDB responds with an HTTP 404 for non-query\nendpoints.\n"],["Fauna::Page","","Fauna/Page.html","","<p>Helper for handling pagination over sets.\n<p>Given a client and a set, allows you to iterate as well as individually …\n"],["Fauna::PermissionDenied","","Fauna/PermissionDenied.html","","<p>An exception thrown if FaunaDB responds with an HTTP 403.\n"],["Fauna::Query","","Fauna/Query.html","","<p>Helpers modeling the FaunaDB Query language.\n<p>Helpers are usually used via a concise DSL notation. A DSL …\n"],["Fauna::QueryV","","Fauna/QueryV.html","","<p>A QueryV.\n<p>Reference: FaunaDB Special Types\n"],["Fauna::Ref","","Fauna/Ref.html","","<p>A Ref.\n<p>Reference: FaunaDB Special Types\n"],["Fauna::RequestResult","","Fauna/RequestResult.html","","<p>The result of a request. Provided to observers and included within errors.\n"],["Fauna::SetRef","","Fauna/SetRef.html","","<p>A SetRef.\n<p>Reference: FaunaDB Special Types\n"],["Fauna::Unauthorized","","Fauna/Unauthorized.html","","<p>An exception thrown if FaunaDB responds with an HTTP 401.\n"],["Fauna::UnavailableError","","Fauna/UnavailableError.html","","<p>An exception thrown if FaunaDB responds with an HTTP 502, 503, or 504.\n"],["Fauna::UnexpectedError","","Fauna/UnexpectedError.html","","<p>Error for when the server returns an unexpected kind of response.\n"],["==","Fauna::Bytes","Fauna/Bytes.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if <code>other</code> is a Bytes and contains the\nsame bytes.\n"],["==","Fauna::Page","Fauna/Page.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if <code>other</code> is a Page and contains the\nsame configuration and data.\n"],["==","Fauna::QueryV","Fauna/QueryV.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if <code>other</code> is a QueryV and contains\nthe same value.\n"],["==","Fauna::Ref","Fauna/Ref.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if <code>other</code> is a Ref and contains the\nsame value.\n"],["==","Fauna::SetRef","Fauna/SetRef.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if <code>other</code> is a SetRef and contains\nthe same value.\n"],["add","Fauna::Query","Fauna/Query.html#method-i-add","(*numbers)","<p>An add function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["after","Fauna::Page","Fauna/Page.html#method-i-after","()","<p>After cursor for the current page.\n<p>Lazily loads the page data if it has not already been loaded.\n"],["all","Fauna::Page","Fauna/Page.html#method-i-all","()","<p>Returns the flattened contents of the set as an array.\n<p>Ideal for when you need the full contents of a …\n"],["and_","Fauna::Query","Fauna/Query.html#method-i-and_","(*booleans)","<p>An and function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["append","Fauna::Query","Fauna/Query.html#method-i-append","(collection, elements)","<p>An append expression\n<p>Reference: FaunaDB Collections\n"],["at","Fauna::Query","Fauna/Query.html#method-i-at","(timestamp, expr)","<p>An at expression\n<p>Reference: FaunaDB Basic Forms\n"],["auth","Fauna::RequestResult","Fauna/RequestResult.html#method-i-auth","()","<p>Credentials used by the client.\n"],["before","Fauna::Page","Fauna/Page.html#method-i-before","()","<p>Before cursor for the current page.\n<p>Lazily loads the page data if it has not already been loaded.\n"],["block","Fauna::Context","Fauna/Context.html#method-c-block","(client)","<p>Returns a context block with the given client.\n<p>client &mdash; Client to use for the context block.\n\n"],["call","Fauna::Query","Fauna/Query.html#method-i-call","(name, *args)","<p>A call expression\n<p>Reference: FaunaDB Basic Forms\n"],["casefold","Fauna::Query","Fauna/Query.html#method-i-casefold","(string)","<p>A casefold function\n<p>Reference: FaunaDB String Functions\n"],["class_","Fauna::Query","Fauna/Query.html#method-i-class_","(name)","<p>A class function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["client","Fauna::Context","Fauna/Context.html#method-c-client","()","<p>Returns the current context&#39;s client, or if there is none, raises\nNoContextError.\n"],["concat","Fauna::Query","Fauna/Query.html#method-i-concat","(strings, separator = nil)","<p>A concat function\n<p>Reference: FaunaDB String Functions\n"],["contains","Fauna::Query","Fauna/Query.html#method-i-contains","(path, in_)","<p>A contains function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["create","Fauna::Query","Fauna/Query.html#method-i-create","(class_ref, params)","<p>A create expression\n<p>Reference: FaunaDB Write functions\n"],["create_class","Fauna::Query","Fauna/Query.html#method-i-create_class","(params)","<p>A create class expression\n<p>Reference: FaunaDB Write functions\n"],["create_database","Fauna::Query","Fauna/Query.html#method-i-create_database","(params)","<p>A create database expression\n<p>Reference: FaunaDB Write functions\n"],["create_function","Fauna::Query","Fauna/Query.html#method-i-create_function","(params)","<p>A create function expression\n<p>Reference: FaunaDB Write functions\n"],["create_index","Fauna::Query","Fauna/Query.html#method-i-create_index","(params)","<p>A create index expression\n<p>Reference: FaunaDB Write functions\n"],["create_key","Fauna::Query","Fauna/Query.html#method-i-create_key","(params)","<p>A create key expression\n<p>Reference: FaunaDB Write functions\n"],["data","Fauna::Page","Fauna/Page.html#method-i-data","()","<p>Data contained within the current page.\n<p>Lazily loads the page data if it has not already been loaded. …\n"],["database","Fauna::Query","Fauna/Query.html#method-i-database","(name)","<p>A database function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["date","Fauna::Query","Fauna/Query.html#method-i-date","(string)","<p>A date expression\n<p>Reference: FaunaDB Time Functions\n"],["delete","Fauna::Client","Fauna/Client.html#method-i-delete","(path)","<p>Performs a <code>DELETE</code> request for a REST endpoint.\n<p>path &mdash; Path to <code>DELETE</code>.\n\n<p>Reference: FaunaDB REST API\n"],["delete","Fauna::Context","Fauna/Context.html#method-c-delete","(path)","<p>Performs a <code>DELETE</code> request for a REST endpoint within the\ncurrent client context.\n<p>path &mdash; Path to <code>DELETE</code>. …\n"],["delete","Fauna::Query","Fauna/Query.html#method-i-delete","(ref)","<p>A delete expression\n<p>Reference: FaunaDB Write functions\n"],["difference","Fauna::Query","Fauna/Query.html#method-i-difference","(*sets)","<p>A difference expression\n<p>Reference: FaunaDB Sets\n"],["distinct","Fauna::Query","Fauna/Query.html#method-i-distinct","(set)","<p>A distinct expression\n<p>Reference: FaunaDB Sets\n"],["divide","Fauna::Query","Fauna/Query.html#method-i-divide","(*numbers)","<p>A divide function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["do_","Fauna::Query","Fauna/Query.html#method-i-do_","(*expressions)","<p>A do expression\n<p>Reference: FaunaDB Basic Forms\n"],["drop","Fauna::Query","Fauna/Query.html#method-i-drop","(number, collection)","<p>A drop expression\n<p>Reference: FaunaDB Collections\n"],["each","Fauna::Page","Fauna/Page.html#method-i-each","()","<p>Returns an enumerator that iterates in the <code>after</code> direction.\n<p>When a block is provided, the return of the …\n"],["epoch","Fauna::Query","Fauna/Query.html#method-i-epoch","(number, unit)","<p>An epoch expression\n<p>Reference: FaunaDB Time Functions\n"],["eql?","Fauna::Bytes","Fauna/Bytes.html#method-i-eql-3F","(other)",""],["eql?","Fauna::Page","Fauna/Page.html#method-i-eql-3F","(other)",""],["eql?","Fauna::QueryV","Fauna/QueryV.html#method-i-eql-3F","(other)",""],["eql?","Fauna::Ref","Fauna/Ref.html#method-i-eql-3F","(other)",""],["eql?","Fauna::SetRef","Fauna/SetRef.html#method-i-eql-3F","(other)",""],["equals","Fauna::Query","Fauna/Query.html#method-i-equals","(*values)","<p>An equals function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["exists","Fauna::Query","Fauna/Query.html#method-i-exists","(ref, params = {})","<p>An exists expression\n<p>Reference: FaunaDB Read functions\n"],["expr","Fauna::Query","Fauna/Query.html#method-c-expr","(&block)","<p>Build a query expression.\n<p>Allows for unscoped calls to Fauna::Query methods within the provided\nblock. …\n"],["filter","Fauna::Page","Fauna/Page.html#method-i-filter","(&lambda)","<p>Returns a copy of the page with a fauna <code>filter</code> using the given\nlambda chained onto the paginate query. …\n"],["filter","Fauna::Query","Fauna/Query.html#method-i-filter","(collection, lambda_expr = nil, &lambda_block)","<p>A filter expression\n<p>Only one of <code>lambda_expr</code> or <code>lambda_block</code> should be\nprovided. For example: <code>Fauna.query</code> …\n"],["foreach","Fauna::Query","Fauna/Query.html#method-i-foreach","(collection, lambda_expr = nil, &lambda_block)","<p>A foreach expression\n<p>Only one of <code>lambda_expr</code> or <code>lambda_block</code> should be\nprovided. For example: <code>Fauna.query</code> …\n"],["foreach!","Fauna::Page","Fauna/Page.html#method-i-foreach-21","(&lambda)","<p>Iterates over the entire set, applying the configured lambda in a foreach\nblock, and discarding the result. …\n"],["from_base64","Fauna::Bytes","Fauna/Bytes.html#method-c-from_base64","(enc)","<p>Create new Bytes object from Base64 encoded bytes.\n"],["function","Fauna::Query","Fauna/Query.html#method-i-function","(name)","<p>A function function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["get","Fauna::Client","Fauna/Client.html#method-i-get","(path, query = {})","<p>Performs a <code>GET</code> request for a REST endpoint.\n<p>path &mdash; Path to <code>GET</code>.\n<p>query &mdash; Query parameters to append to the path. …\n"],["get","Fauna::Context","Fauna/Context.html#method-c-get","(path, query = {})","<p>Performs a <code>GET</code> request for a REST endpoint within the current\nclient context.\n<p>path &mdash; Path to <code>GET</code>.\n<p>query &mdash; "],["get","Fauna::Query","Fauna/Query.html#method-i-get","(ref, params = {})","<p>A get expression\n<p>Reference: FaunaDB Read functions\n"],["gt","Fauna::Query","Fauna/Query.html#method-i-gt","(*values)","<p>A greater than function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["gte","Fauna::Query","Fauna/Query.html#method-i-gte","(*values)","<p>A greater than or equal function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["id","Fauna::Ref","Fauna/Ref.html#method-i-id","()","<p>Removes the class part of the ref, leaving only the id. This is everything\nafter the last /.\n"],["identify","Fauna::Query","Fauna/Query.html#method-i-identify","(ref, password)","<p>An identify function\n<p>Reference: FaunaDB Authentication\n"],["if_","Fauna::Query","Fauna/Query.html#method-i-if_","(condition, then_, else_)","<p>An if expression\n<p>Reference: FaunaDB Basic Forms\n"],["index","Fauna::Query","Fauna/Query.html#method-i-index","(name)","<p>An index function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["insert","Fauna::Query","Fauna/Query.html#method-i-insert","(ref, ts, action, params)","<p>An insert expression\n<p>Reference: FaunaDB Write functions\n"],["intersection","Fauna::Query","Fauna/Query.html#method-i-intersection","(*sets)","<p>An intersection expression\n<p>Reference: FaunaDB Sets\n"],["join","Fauna::Query","Fauna/Query.html#method-i-join","(source, target_expr = nil, &target_block)","<p>A join expression\n<p>Only one of <code>target_expr</code> or <code>target_block</code> should be\nprovided. For example: <code>Fauna.query</code> …\n"],["key_from_secret","Fauna::Query","Fauna/Query.html#method-i-key_from_secret","(secret)","<p>A key_from_secret expression\n<p>Reference: FaunaDB Read functions\n"],["lambda","Fauna::Query","Fauna/Query.html#method-i-lambda","(&block)","<p>A lambda expression\n<p>Reference: FaunaDB Basic Forms\n<p>This form generates #var objects for you, and is called …\n"],["lambda_expr","Fauna::Query","Fauna/Query.html#method-i-lambda_expr","(var, expr)","<p>A raw lambda expression\n<p>Reference: FaunaDB Basic Forms\n<p>See also #lambda.\n"],["let","Fauna::Query","Fauna/Query.html#method-i-let","(vars, expr = nil, &block)","<p>A let expression\n<p>Only one of <code>expr</code> or <code>block</code> should be provided.\n<p>Block example: <code>Fauna.query { let(x: 2) {</code> …\n"],["load!","Fauna::Page","Fauna/Page.html#method-i-load-21","()","<p>Explicitly loads data for the current page if it has not already been\nloaded.\n<p>Returns <code>true</code> if the data …\n"],["logger","Fauna::ClientLogger","Fauna/ClientLogger.html#method-c-logger","()","<p>Lambda that can be the <code>observer</code> for a Client. Will call the\npassed block on a string representation of …\n"],["login","Fauna::Query","Fauna/Query.html#method-i-login","(ref, params)","<p>A login function\n<p>Reference: FaunaDB Authentication\n"],["logout","Fauna::Query","Fauna/Query.html#method-i-logout","(all_tokens)","<p>A logout function\n<p>Reference: FaunaDB Authentication\n"],["lt","Fauna::Query","Fauna/Query.html#method-i-lt","(*values)","<p>A less than function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["lte","Fauna::Query","Fauna/Query.html#method-i-lte","(*values)","<p>A less than or equal function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["map","Fauna::Page","Fauna/Page.html#method-i-map","(&lambda)","<p>Returns a copy of the page with a fauna <code>map</code> using the given\nlambda chained onto the paginate query.\n<p>The …\n"],["map","Fauna::Query","Fauna/Query.html#method-i-map","(collection, lambda_expr = nil, &lambda_block)","<p>A map expression\n<p>Only one of <code>lambda_expr</code> or <code>lambda_block</code> should be\nprovided. For example: <code>Fauna.query</code> …\n"],["match","Fauna::Query","Fauna/Query.html#method-i-match","(index, *terms)","<p>A match expression\n<p>Reference: FaunaDB Sets\n"],["modulo","Fauna::Query","Fauna/Query.html#method-i-modulo","(*numbers)","<p>A modulo function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["multiply","Fauna::Query","Fauna/Query.html#method-i-multiply","(*numbers)","<p>A multiply function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["new","Fauna::Bytes","Fauna/Bytes.html#method-c-new","(bytes)","<p>Creates a new Bytes wrapper with the given parameters.\n<p>bytes &mdash; The bytes to be wrapped by the Bytes object. …\n\n"],["new","Fauna::Client","Fauna/Client.html#method-c-new","(params = {})","<p>Create a new Client.\n<p>params &mdash; A list of parameters to configure the connection with.\n<p>:domain &mdash; The domain to …\n"],["new","Fauna::FaunaError","Fauna/FaunaError.html#method-c-new","(request_result)","<p>Creates a new error from a given RequestResult or Exception.\n"],["new","Fauna::Page","Fauna/Page.html#method-c-new","(client, set, params = {}, &lambda)","<p>Creates a pagination helper for paging/iterating over a set.\n<p>client &mdash; Client to execute queries with.\n<p>set … &mdash; "],["new","Fauna::QueryV","Fauna/QueryV.html#method-c-new","(params = {})","<p>Creates a new QueryV with the given parameters.\n<p>params &mdash; Hash of parameters to build the QueryV with.\n\n<p>Reference: …\n"],["new","Fauna::Ref","Fauna/Ref.html#method-c-new","(value)","<p>Creates a Ref object.\n<p><code>value</code>: A string.\n"],["new","Fauna::SetRef","Fauna/SetRef.html#method-c-new","(params = {})","<p>Creates a new SetRef with the given parameters.\n<p>params &mdash; Hash of parameters to build the SetRef with.\n\n<p>Reference: …\n"],["next_id","Fauna::Query","Fauna/Query.html#method-i-next_id","()","<p>A next_id function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["not_","Fauna::Query","Fauna/Query.html#method-i-not_","(boolean)","<p>A not function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["object","Fauna::Query","Fauna/Query.html#method-i-object","(fields)","<p>An object expression\n<p>Query expression constructs can also take a regular ruby object, so the\nfollowing …\n"],["or_","Fauna::Query","Fauna/Query.html#method-i-or_","(*booleans)","<p>An or function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["page_after","Fauna::Page","Fauna/Page.html#method-i-page_after","()","<p>The page after the current one in the set.\n<p>Returns <code>nil</code> when there are no more pages after the current …\n"],["page_before","Fauna::Page","Fauna/Page.html#method-i-page_before","()","<p>The page before the current one in the set.\n<p>Returns <code>nil</code> when there are no more pages before the current …\n"],["paginate","Fauna::Client","Fauna/Client.html#method-i-paginate","(set, params = {}, &fauna_map)","<p>Creates a Fauna::Page for paging/iterating over a set.\n<p>set &mdash; A set query to paginate over.\n<p>params &mdash; A list …\n"],["paginate","Fauna::Context","Fauna/Context.html#method-c-paginate","(set, params = {}, &fauna_map)","<p>Creates a Fauna::Page for paging/iterating over a set with the current\nclient context.\n<p>set &mdash; A set query …\n"],["paginate","Fauna::Query","Fauna/Query.html#method-i-paginate","(set, params = {})","<p>A paginate expression\n<p>Reference: FaunaDB Read functions\n"],["patch","Fauna::Client","Fauna/Client.html#method-i-patch","(path, data = {})","<p>Performs a <code>PATCH</code> request for a REST endpoint.\n<p>path &mdash; Path to <code>PATCH</code>.\n<p>data &mdash; Data to post as the body. <code>data</code> is …\n"],["patch","Fauna::Context","Fauna/Context.html#method-c-patch","(path, data = {})","<p>Performs a <code>PATCH</code> request for a REST endpoint within the\ncurrent client context.\n<p>path &mdash; Path to <code>PATCH</code>.\n<p>data … &mdash; "],["ping","Fauna::Client","Fauna/Client.html#method-i-ping","(params = {})","<p>Ping FaunaDB.\n<p>Reference: FaunaDB Rest API.\n"],["pop","Fauna::Context","Fauna/Context.html#method-c-pop","()","<p>Removes the last client context from the stack and returns it.\n"],["post","Fauna::Client","Fauna/Client.html#method-i-post","(path, data = {})","<p>Performs a <code>POST</code> request for a REST endpoint.\n<p>path &mdash; Path to <code>POST</code>.\n<p>data &mdash; Data to post as the body. <code>data</code> is …\n"],["post","Fauna::Context","Fauna/Context.html#method-c-post","(path, data = {})","<p>Performs a <code>POST</code> request for a REST endpoint within the current\nclient context.\n<p>path &mdash; Path to <code>POST</code>.\n<p>data … &mdash; "],["postprocessing_map","Fauna::Page","Fauna/Page.html#method-i-postprocessing_map","(&block)","<p>Returns a copy of the page with the given ruby block set.\n<p>The block will be used to map the returned data …\n"],["prepend","Fauna::Query","Fauna/Query.html#method-i-prepend","(collection, elements)","<p>A prepend expression\n<p>Reference: FaunaDB Collections\n"],["push","Fauna::Context","Fauna/Context.html#method-c-push","(client)","<p>Adds a client to the current context.\n<p>client &mdash; Client to add to the current context.\n\n"],["put","Fauna::Client","Fauna/Client.html#method-i-put","(path, data = {})","<p>Performs a <code>PUT</code> request for a REST endpoint.\n<p>path &mdash; Path to <code>PUT</code>.\n<p>data &mdash; Data to post as the body. <code>data</code> is automatically …\n"],["put","Fauna::Context","Fauna/Context.html#method-c-put","(path, data = {})","<p>Performs a <code>PUT</code> request for a REST endpoint within the current\nclient context.\n<p>path &mdash; Path to <code>PUT</code>.\n<p>data &mdash; Data …\n"],["query","Fauna::Client","Fauna/Client.html#method-i-query","(expression = nil, &expr_block)","<p>Issues a query to FaunaDB.\n<p>Queries are built via the Query helpers. See FaunaDB Query API for\ninformation …\n"],["query","Fauna::Context","Fauna/Context.html#method-c-query","(expression = nil, &expr_block)","<p>Issues a query to FaunaDB with the current client context.\n<p>Queries are built via the Query helpers. See …\n"],["query","Fauna::Query","Fauna/Query.html#method-i-query","(expr)","<p>A query expression\n<p>Reference: FaunaDB Basic Forms\n"],["raise_for_status_code","Fauna::FaunaError","Fauna/FaunaError.html#method-c-raise_for_status_code","(request_result)","<p>Raises the associated error from a RequestResult based on the status code.\n<p>Returns <code>nil</code> for 2xx status …\n"],["ref","Fauna::Query","Fauna/Query.html#method-i-ref","(str, id = nil)","<p>Construct a ref value\n<p>Reference: FaunaDB Values\n"],["remove","Fauna::Query","Fauna/Query.html#method-i-remove","(ref, ts, action)","<p>A remove expression\n<p>Reference: FaunaDB Write functions\n"],["replace","Fauna::Query","Fauna/Query.html#method-i-replace","(ref, params)","<p>A replace expression\n<p>Reference: FaunaDB Write functions\n"],["reset","Fauna::Context","Fauna/Context.html#method-c-reset","()","<p>Resets the current client context, removing all the clients from the stack.\n"],["reverse_each","Fauna::Page","Fauna/Page.html#method-i-reverse_each","()","<p>Returns an enumerator that iterates in the <code>before</code> direction.\n<p>When a block is provided, the return of the …\n"],["select","Fauna::Query","Fauna/Query.html#method-i-select","(path, from, params = {})","<p>A select function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["show_request_result","Fauna::ClientLogger","Fauna/ClientLogger.html#method-c-show_request_result","(request_result)","<p>Translates a RequestResult to a string suitable for logging.\n"],["subtract","Fauna::Query","Fauna/Query.html#method-i-subtract","(*numbers)","<p>A subtract function\n<p>Reference: FaunaDB Miscellaneous Functions\n"],["take","Fauna::Query","Fauna/Query.html#method-i-take","(number, collection)","<p>A take expression\n<p>Reference: FaunaDB Collections\n"],["time","Fauna::Query","Fauna/Query.html#method-i-time","(string)","<p>A time expression\n<p>Reference: FaunaDB Time Functions\n"],["time_from_usecs","Fauna","Fauna.html#method-c-time_from_usecs","(microseconds)","<p>Converts microseconds to a Time object.\n<p>microseconds &mdash; Time in microseconds.\n\n"],["time_taken","Fauna::RequestResult","Fauna/RequestResult.html#method-i-time_taken","()","<p>Real time spent performing the request.\n"],["to_class","Fauna::Ref","Fauna/Ref.html#method-i-to_class","()","<p>Gets the class part out of the Ref. This is done by removing ref.id(). So\n<code>Fauna::Ref.new(&#39;a/b/c&#39;).to_class</code> …\n"],["to_hash","Fauna::Bytes","Fauna/Bytes.html#method-i-to_hash","()","<p>Converts the Bytes to Hash form.\n"],["to_hash","Fauna::QueryV","Fauna/QueryV.html#method-i-to_hash","()","<p>Converts the QueryV to Hash form.\n"],["to_hash","Fauna::Ref","Fauna/Ref.html#method-i-to_hash","()","<p>Converts the Ref in Hash form.\n"],["to_hash","Fauna::SetRef","Fauna/SetRef.html#method-i-to_hash","()","<p>Converts the SetRef to Hash form.\n"],["to_s","Fauna::Ref","Fauna/Ref.html#method-i-to_s","()","<p>Converts the Ref to a string\n"],["union","Fauna::Query","Fauna/Query.html#method-i-union","(*sets)","<p>A union expression\n<p>Reference: FaunaDB Sets\n"],["update","Fauna::Query","Fauna/Query.html#method-i-update","(ref, params)","<p>An update expression\n<p>Reference: FaunaDB Write functions\n"],["usecs_from_time","Fauna","Fauna.html#method-c-usecs_from_time","(time)","<p>Converts a Time object to microseconds.\n<p>time &mdash; A Time object.\n\n"],["var","Fauna::Query","Fauna/Query.html#method-i-var","(name)","<p>A var expression\n<p>Reference: FaunaDB Basic Forms\n"],["with_params","Fauna::Page","Fauna/Page.html#method-i-with_params","(params = {})","<p>Returns a copy of the page with the given <code>params</code> set.\n<p>See paginate for more details.\n"],["with_secret","Fauna::Client","Fauna/Client.html#method-i-with_secret","(secret)","<p>Create a new client from the existing config with a given secret.\n<p>:secret &mdash; Credentials to use when sending …\n\n"],["README","","README_md.html","","<p>FaunaDB\n<p><img\nsrc=\"https://img.shields.io/travis/fauna/faunadb-ruby/master.svg?maxAge=21600\">\n<img\nsrc=\"https://img.shields.io/codecov/c/github/fauna/faunadb-ruby/master.svg?maxAge=21600\">\n...\n"]]}}